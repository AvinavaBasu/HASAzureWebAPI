// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Raet_UserManagement_HAS.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ValidationTestCases_Granted_API", Description="\tValidation test cases", SourceFile="FeatureFiles\\ValidationTestCases_Granted_API.feature", SourceLine=0)]
    public partial class ValidationTestCases_Granted_APIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ValidationTestCases_Granted_API.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValidationTestCases_Granted_API", "\tValidation test cases", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
    testRunner.Given("I have AuthenticationAPIURI https://api-test.raet.com/authentication", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.And("I have Content-Type Header value as application/x-www-form-urlencoded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.And("I have APIBody value as client_id=J4ZWfGbbeuqf49HQAEINMi8t8QizIMiK&client_secret=" +
                    "ui7BgSuLwAjuYtmc&grant_type=client_credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then("I will get OK response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("I get Acces token response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request by Remove \'fromDateTIme\' block in API body value", new string[] {
                "DEV_API"}, SourceLine=13)]
        public virtual void PostGrantedEventRequestByRemoveFromDateTImeBlockInAPIBodyValue()
        {
            string[] tagsOfScenario = new string[] {
                    "DEV_API"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request by Remove \'fromDateTIme\' block in API body value", null, new string[] {
                        "DEV_API"});
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 15
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And(@"I have APIBody value as {   ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.And("API response should display error message as The FromDateTime field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'fromDateTime\' value is null in API body value", SourceLine=24)]
        public virtual void PostGrantedEventRequestWhenFromDateTimeValueIsNullInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'fromDateTime\' value is null in API body value", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 26
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": """",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("API response should display error message as The FromDateTime field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue(string input, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request sending invalid dates to \'fromDateTIme\' input in API b" +
                    "ody value", null, exampleTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 37
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And(string.Format("I have APIBody value as {0}", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.And("API response should display error message as Could not convert string to DateTime" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute(@"Post Granted Event Request sending invalid dates to 'fromDateTIme' input in API body value, {  ""fromDateTime"": ""2019-13-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", SourceLine=48)]
        public virtual void PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue_FromDateTime2019_13_25T0517270000EffectiveAuthorizationTenantIdHAS2UserContextYouforce_UsersIdRO276870PermissionIdVeiwEmployeeApplicationHAS_ReportingDescriptionTestTargetContextYouforce_UsersIdIC112070()
        {
#line 36
this.PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue(@"{  ""fromDateTime"": ""2019-13-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute(@"Post Granted Event Request sending invalid dates to 'fromDateTIme' input in API body value, {  ""fromDateTime"": ""2019-09-31T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", SourceLine=48)]
        public virtual void PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue_FromDateTime2019_09_31T0517270000EffectiveAuthorizationTenantIdHAS2UserContextYouforce_UsersIdRO276870PermissionIdVeiwEmployeeApplicationHAS_ReportingDescriptionTestTargetContextYouforce_UsersIdIC112070()
        {
#line 36
this.PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue(@"{  ""fromDateTime"": ""2019-09-31T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute(@"Post Granted Event Request sending invalid dates to 'fromDateTIme' input in API body value, {  ""fromDateTime"": ""2019-02-30T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", SourceLine=48)]
        public virtual void PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue_FromDateTime2019_02_30T0517270000EffectiveAuthorizationTenantIdHAS2UserContextYouforce_UsersIdRO276870PermissionIdVeiwEmployeeApplicationHAS_ReportingDescriptionTestTargetContextYouforce_UsersIdIC112070()
        {
#line 36
this.PostGrantedEventRequestSendingInvalidDatesToFromDateTImeInputInAPIBodyValue(@"{  ""fromDateTime"": ""2019-02-30T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request by removing \'TenantID\' block in API body value", SourceLine=52)]
        public virtual void PostGrantedEventRequestByRemovingTenantIDBlockInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request by removing \'TenantID\' block in API body value", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 54
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {        ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.And("API response should display error message as The TenantId field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'TenantID\' value is null in API body value", SourceLine=63)]
        public virtual void PostGrantedEventRequestWhenTenantIDValueIsNullInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'TenantID\' value is null in API body value", null, ((string[])(null)));
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 65
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": """",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.And("API response should display error message as The TenantId field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request by removing \'User\' block in API body value", SourceLine=74)]
        public virtual void PostGrantedEventRequestByRemovingUserBlockInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request by removing \'User\' block in API body value", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 76
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",       ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.And("API response should display error message as The User field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'User\' blocks \'context\' input contains null value" +
            " in API body value", SourceLine=85)]
        public virtual void PostGrantedEventRequestWhenUserBlocksContextInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'User\' blocks \'context\' input contains null value" +
                    " in API body value", null, ((string[])(null)));
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 87
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": """",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.And("API response should display error message as The Context field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'User\' blocks \'id\' input contains null value in A" +
            "PI body value", SourceLine=96)]
        public virtual void PostGrantedEventRequestWhenUserBlocksIdInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'User\' blocks \'id\' input contains null value in A" +
                    "PI body value", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 98
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 99
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": """"    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.And("API response should display error message as The Id field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request by removing \'permission\' block in API body value", SourceLine=107)]
        public virtual void PostGrantedEventRequestByRemovingPermissionBlockInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request by removing \'permission\' block in API body value", null, ((string[])(null)));
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 109
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },     ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.And("API response should display error message as The Permission field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'permission\' blocks \'id\' input contains null valu" +
            "e in API body value", SourceLine=118)]
        public virtual void PostGrantedEventRequestWhenPermissionBlocksIdInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'permission\' blocks \'id\' input contains null valu" +
                    "e in API body value", null, ((string[])(null)));
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 120
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": """",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.And("API response should display error message as The Id field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'permission\' blocks \'application\' input contains " +
            "null value in API body value", SourceLine=129)]
        public virtual void PostGrantedEventRequestWhenPermissionBlocksApplicationInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'permission\' blocks \'application\' input contains " +
                    "null value in API body value", null, ((string[])(null)));
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 131
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 132
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": """",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.And("API response should display error message as The Application field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'permission\' blocks \'description\' input contains " +
            "null value in API body value", SourceLine=140)]
        public virtual void PostGrantedEventRequestWhenPermissionBlocksDescriptionInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'permission\' blocks \'description\' input contains " +
                    "null value in API body value", null, ((string[])(null)));
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 142
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": """"    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
 testRunner.Then("I will get Created response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
 testRunner.And("API response should display Created Event details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request  by removing \'target\' block in API body value", SourceLine=151)]
        public virtual void PostGrantedEventRequestByRemovingTargetBlockInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request  by removing \'target\' block in API body value", null, ((string[])(null)));
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 153
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    }      }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
 testRunner.Then("I will get Created response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.And("API response should display Created Event details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'target\' blocks \'context\' input contains null val" +
            "ue in API body value", SourceLine=162)]
        public virtual void PostGrantedEventRequestWhenTargetBlocksContextInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'target\' blocks \'context\' input contains null val" +
                    "ue in API body value", null, ((string[])(null)));
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 164
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": """",      ""id"": ""IC112070""    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.And("API response should display error message as The Context field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Granted Event Request when \'target\' blocks \'id\' input contains null value in" +
            " API body value", SourceLine=173)]
        public virtual void PostGrantedEventRequestWhenTargetBlocksIdInputContainsNullValueInAPIBodyValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Granted Event Request when \'target\' blocks \'id\' input contains null value in" +
                    " API body value", null, ((string[])(null)));
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 175
 testRunner.Given("I Have GrantedApiUrl https://raetgdpr-dev.azurewebsites.net/api/EffectiveAuthoriz" +
                        "ationEvents/granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
 testRunner.And("I have Request type as Post", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("I have Content-Type Header value as application/json", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("I have x-raet-tenent-id Header value as user1@youforceonedevclient1.onmicrosoft.c" +
                        "om", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("I have Authorization Header value from AuthenticationAPI-Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
 testRunner.And(@"I have APIBody value as {  ""fromDateTime"": ""2019-10-25T05:17:27+00:00"",  ""effectiveAuthorization"": {    ""tenantId"": ""HAS2"",    ""user"": {      ""context"": ""Youforce.Users"",      ""id"": ""RO276870""    },    ""permission"": {      ""id"": ""Veiw Employee"",      ""application"": ""HAS-Reporting"",      ""description"": ""Test""    },    ""target"": {      ""context"": ""Youforce.Users"",      ""id"": """"    }  }}", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
 testRunner.When("I Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
 testRunner.Then("I will get BadRequest response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.And("API response should display error message as The Id field is required.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
